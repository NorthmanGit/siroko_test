<?php
namespace App\Cart\Infrastructure\Controller;

use App\Cart\Application\Command\AddItemToCartCommand;
use App\Cart\Application\CommandHandler\AddItemToCartHandler;
use App\Cart\Application\Query\GetCartQuery;
use App\Cart\Application\QueryHandler\GetCartHandler;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

class CartController
{
    private AddItemToCartHandler $addItemHandler;
    private GetCartHandler $getCartHandler;

    public function __construct(AddItemToCartHandler $addItemHandler, GetCartHandler $getCartHandler)
    {
        $this->addItemHandler = $addItemHandler;
        $this->getCartHandler = $getCartHandler;
    }

    #[Route('/api/cart/{id}/items', name: 'add_item_to_cart', methods: ['POST'])]
    public function addItem(string $id, Request $request): JsonResponse
    {
        $data = json_decode($request->getContent(), true);
        $command = new AddItemToCartCommand($id, $data['productId'], $data['quantity']);
        ($this->addItemHandler)($command);
        return new JsonResponse(['status' => 'item added']);
    }

    #[Route('/api/cart/{id}', name: 'get_cart', methods: ['GET'])]
    public function getCart(string $id): JsonResponse
    {
        $query = new GetCartQuery($id);
        $cart = ($this->getCartHandler)($query);

        if (!$cart) {
            return new JsonResponse(['error' => 'Cart not found'], 404);
        }

        // Para simplificar, devolvemos solo los items
        $items = array_map(function ($item) {
            return [
                'productId' => $item->getProductId(),
                'quantity' => $item->getQuantity()
            ];
        }, $cart->getItems());

        return new JsonResponse(['cartId' => $cart->getId(), 'items' => $items]);
    }
}